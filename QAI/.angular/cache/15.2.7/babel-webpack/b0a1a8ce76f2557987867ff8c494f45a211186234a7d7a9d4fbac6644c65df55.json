{"ast":null,"code":"import { Configuration, OpenAIApi } from 'openai';\nimport { filter, from, map } from 'rxjs';\nimport { environment } from 'src/Environments/Environments';\nimport * as i0 from \"@angular/core\";\nconst APIKEY = environment.apikey;\nexport class ChatBotService {\n  constructor() {\n    this.configuration = new Configuration({\n      apiKey: APIKEY\n    });\n    this.openai = new OpenAIApi(this.configuration);\n  }\n  getDataFromOpenAI(text) {\n    from(this.openai.createCompletion({\n      model: 'text-davinci-003',\n      prompt: text,\n      max_tokens: 256,\n      temperature: 0.7\n    })).pipe(filter(resp => !!resp && !!resp.data), map(resp => resp.data), filter(data => data.choices && data.choices.length > 0 && data.choices[0].text), map(data => data.choices[0].text)).subscribe(data => {\n      $('.respuesta').append(`\n      <ul class=\"list-group mb-2\">\n        <li class=\"list-group-item bg-primary text-ligth\">${data}</li>\n        <br>\n      </ul>\n    `);\n    });\n  }\n}\nChatBotService.ɵfac = function ChatBotService_Factory(t) {\n  return new (t || ChatBotService)();\n};\nChatBotService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ChatBotService,\n  factory: ChatBotService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,aAAa,EAAEC,SAAS,QAAQ,QAAQ;AACjD,SAASC,MAAM,EAAEC,IAAI,EAAEC,GAAG,QAAQ,MAAM;AACxC,SAASC,WAAW,QAAQ,+BAA+B;;AAE3D,MAAMC,MAAM,GAAGD,WAAW,CAACE,MAAM;AAQjC,OAAM,MAAOC,cAAc;EAEzBC;IAEO,kBAAa,GAAG,IAAIT,aAAa,CAAC;MACzCU,MAAM,EAACJ;KACR,CAAC;IAEO,WAAM,GAAG,IAAIL,SAAS,CAAC,IAAI,CAACU,aAAa,CAAC;EANjC;EAQlBC,iBAAiB,CAACC,IAAY;IAE5BV,IAAI,CAAC,IAAI,CAACW,MAAM,CAACC,gBAAgB,CAAC;MAEhCC,KAAK,EAAC,kBAAkB;MACxBC,MAAM,EAAEJ,IAAI;MACZK,UAAU,EAAC,GAAG;MACdC,WAAW,EAAC;KAIb,CAAC,CAAC,CAAEC,IAAI,CACPlB,MAAM,CAACmB,IAAI,IAAE,CAAC,CAACA,IAAI,IAAI,CAAC,CAACA,IAAI,CAACC,IAAI,CAAC,EAEnClB,GAAG,CAACiB,IAAI,IAAEA,IAAI,CAACC,IAAI,CAAC,EACpBpB,MAAM,CAAEoB,IAAQ,IAIdA,IAAI,CAACC,OAAO,IAAID,IAAI,CAACC,OAAO,CAACC,MAAM,GAAG,CAAC,IAAKF,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACV,IAG7D,CAAC,EACFT,GAAG,CAACkB,IAAI,IAAEA,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACV,IAAI,CAAC,CAI9B,CAACY,SAAS,CAACH,IAAI,IAAE;MAEhBI,CAAC,CAAC,YAAY,CAAC,CAACC,MAAM,CAAC;;4DAE+BL,IAAI;;;KAG3D,CAAC;IAEF,CAAC,CAAC;EAEN;;AAhDad,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAoB,SAAdpB,cAAc;EAAAqB,YAFb;AAAM","names":["Configuration","OpenAIApi","filter","from","map","environment","APIKEY","apikey","ChatBotService","constructor","apiKey","configuration","getDataFromOpenAI","text","openai","createCompletion","model","prompt","max_tokens","temperature","pipe","resp","data","choices","length","subscribe","$","append","factory","providedIn"],"sourceRoot":"","sources":["C:\\IA\\QAI\\src\\app\\services\\chat-bot.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Configuration, OpenAIApi } from 'openai';\r\nimport { filter, from, map } from 'rxjs';\r\nimport { environment } from 'src/Environments/Environments';\r\n\r\nconst APIKEY = environment.apikey;\r\n\r\ndeclare var $:any;\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ChatBotService {\r\n\r\n  constructor() { }\r\n\r\nreadonly configuration = new Configuration({\r\n  apiKey:APIKEY\r\n});\r\n\r\nreadonly openai = new OpenAIApi(this.configuration)\r\n\r\ngetDataFromOpenAI(text: string){\r\n\r\n  from(this.openai.createCompletion({\r\n\r\n    model:'text-davinci-003', \r\n    prompt: text,\r\n    max_tokens:256,\r\n    temperature:0.7\r\n\r\n\r\n\r\n  })) .pipe(\r\n    filter(resp=>!!resp && !!resp.data),\r\n    \r\n    map(resp=>resp.data),\r\n    filter((data:any)=>(\r\n\r\n\r\n      \r\n      data.choices && data.choices.length > 0  && data.choices[0].text\r\n      \r\n\r\n    )),\r\n    map(data=>data.choices[0].text)\r\n\r\n\r\n    \r\n    ).subscribe(data=>{\r\n\r\n      $('.respuesta').append(`\r\n      <ul class=\"list-group mb-2\">\r\n        <li class=\"list-group-item bg-primary text-ligth\">${data}</li>\r\n        <br>\r\n      </ul>\r\n    `);\r\n    \r\n    })\r\n\r\n}\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}